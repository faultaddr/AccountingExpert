package com.faultaddr.greendaoapp.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORD_DETAIL".
*/
public class RecordDetailDao extends AbstractDao<RecordDetail, Long> {

    public static final String TABLENAME = "RECORD_DETAIL";

    /**
     * Properties of entity RecordDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Detail = new Property(1, String.class, "detail", false, "DETAIL");
        public final static Property Category = new Property(2, String.class, "category", false, "CATEGORY");
        public final static Property Amount = new Property(3, String.class, "amount", false, "AMOUNT");
        public final static Property Account = new Property(4, String.class, "account", false, "ACCOUNT");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property Timestamp = new Property(6, java.util.Date.class, "timestamp", false, "TIMESTAMP");
    }


    public RecordDetailDao(DaoConfig config) {
        super(config);
    }
    
    public RecordDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORD_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DETAIL\" TEXT," + // 1: detail
                "\"CATEGORY\" TEXT," + // 2: category
                "\"AMOUNT\" TEXT," + // 3: amount
                "\"ACCOUNT\" TEXT," + // 4: account
                "\"DATE\" TEXT," + // 5: date
                "\"TIMESTAMP\" INTEGER);"); // 6: timestamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORD_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecordDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(2, detail);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(3, category);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(4, amount);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(5, account);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        java.util.Date timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(7, timestamp.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecordDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(2, detail);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(3, category);
        }
 
        String amount = entity.getAmount();
        if (amount != null) {
            stmt.bindString(4, amount);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(5, account);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        java.util.Date timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(7, timestamp.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public RecordDetail readEntity(Cursor cursor, int offset) {
        RecordDetail entity = new RecordDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // detail
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // category
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // amount
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // account
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // date
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // timestamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecordDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDetail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCategory(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAmount(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccount(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimestamp(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(RecordDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(RecordDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecordDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
